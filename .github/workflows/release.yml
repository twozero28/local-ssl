name: Release binaries

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created, published]

permissions:
  contents: write

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
      tag_name: ${{ steps.tag.outputs.tag_name }}
    steps:
      - name: Determine tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag_name=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag_name=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
          fi
      - name: Create release when tag is pushed
        id: create_release
        if: ${{ github.event_name == 'push' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          release_name: ${{ steps.tag.outputs.tag_name }}
          draft: false
          prerelease: false
      - name: Resolve release upload URL
        id: set_upload_url
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "upload_url=${{ github.event.release.upload_url }}" >> "$GITHUB_OUTPUT"
          else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"
          fi

  build:
    runs-on: ubuntu-latest
    needs: prepare_release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            ext: ''
            archive: tar.gz
            content_type: application/gzip
          - goos: linux
            goarch: arm64
            ext: ''
            archive: tar.gz
            content_type: application/gzip
          - goos: darwin
            goarch: amd64
            ext: ''
            archive: tar.gz
            content_type: application/gzip
          - goos: darwin
            goarch: arm64
            ext: ''
            archive: tar.gz
            content_type: application/gzip
          - goos: windows
            goarch: amd64
            ext: '.exe'
            archive: zip
            content_type: application/zip
          - goos: windows
            goarch: arm64
            ext: '.exe'
            archive: zip
            content_type: application/zip
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Build ${{ matrix.goos }}-${{ matrix.goarch }} binary
        run: |
          mkdir -p dist
          output="dist/devlink-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -o "$output" ./cmd/devlink
      - name: Package archive
        run: |
          set -euo pipefail
          binary_name="devlink${{ matrix.ext }}"
          archive_basename="devlink-${{ needs.prepare_release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          build_artifact="dist/devlink-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          stage_dir="dist/${archive_basename}"

          mkdir -p "$stage_dir"
          cp "$build_artifact" "$stage_dir/$binary_name"
          cp LICENSE "$stage_dir/"

          if [ "${{ matrix.archive }}" = "zip" ]; then
            (cd "$stage_dir" && zip -r "../${archive_basename}.zip" .)
            rm -rf "$stage_dir"
            (cd dist && sha256sum "${archive_basename}.zip" > "${archive_basename}.zip.sha256")
          else
            (cd "$stage_dir" && tar -czf "../${archive_basename}.tar.gz" .)
            rm -rf "$stage_dir"
            (cd dist && sha256sum "${archive_basename}.tar.gz" > "${archive_basename}.tar.gz.sha256")
          fi
      - name: Upload packaged archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: dist/devlink-${{ needs.prepare_release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}
          asset_name: devlink-${{ needs.prepare_release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}
          asset_content_type: ${{ matrix.content_type }}
      - name: Upload checksum file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: dist/devlink-${{ needs.prepare_release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}.sha256
          asset_name: devlink-${{ needs.prepare_release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive }}.sha256
          asset_content_type: text/plain
