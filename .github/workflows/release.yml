name: Release builds

on:
  release:
    types: [published, created]
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and publish assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            archive: tar.gz
          - goos: darwin
            goarch: amd64
            archive: tar.gz
          - goos: darwin
            goarch: arm64
            archive: tar.gz
          - goos: windows
            goarch: amd64
            archive: zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build and package
        id: package
        run: |
          set -euo pipefail
          mkdir -p dist
          target="devlink-${{ matrix.goos }}-${{ matrix.goarch }}"
          build_dir="dist/${target}"
          rm -rf "${build_dir}"
          mkdir -p "${build_dir}"

          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi

          GOOS=${{ matrix.goos }} \
          GOARCH=${{ matrix.goarch }} \
          CGO_ENABLED=0 \
          go build -o "${build_dir}/devlink${ext}" -ldflags "-s -w" ./cmd/devlink

          case "${{ matrix.archive }}" in
            zip)
              archive_path="dist/${target}.zip"
              (cd dist && zip -r "${target}.zip" "${target}")
              ;;
            tar.gz)
              archive_path="dist/${target}.tar.gz"
              (cd dist && tar -czf "${target}.tar.gz" "${target}")
              ;;
            *)
              echo "Unsupported archive type: ${{ matrix.archive }}" >&2
              exit 1
              ;;
          esac

          echo "archive_path=${archive_path}" >> "$GITHUB_OUTPUT"

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.package.outputs.archive_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
